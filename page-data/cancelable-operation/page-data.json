{"componentChunkName":"component---src-templates-org-posts-js","path":"/cancelable-operation","result":{"data":{"orgContent":{"html":"<div class=\"section\"><h2><a href=\"https://web.archive.org/web/20150930232923/http://www.ibm.com/developerworks/library/j-jtp05236/\">Java theory and practice: Dealing with InterruptedException</a>    </h2><ul><li>Because blocking methods can potentially take forever if the event they are waiting for never occurs, it is often useful for blocking operations to be cancelable. </li><li>A cancelable operation is one that can be externally moved to completion in advance of when it would ordinarily complete on its own. </li><li>When a method throws InterruptedException, it is telling you that if the thread executing the method is interrupted, it will make an attempt to stop what it is doing and return early and indicate its early return by throwing InterruptedException. Well-behaved blocking library methods should be responsive to interruption and throw InterruptedException so they can be used within cancelable activities without compromising responsiveness. </li><li>Every thread has a Boolean property associated with it that represents its interrupted status. The interrupted status is initially false; when a thread is interrupted by some other thread through a call to Thread.interrupt(), one of two things happens. If that thread is executing a low-level interruptible blocking method like Thread.sleep(), Thread.join(), or Object.wait(), it unblocks and throws InterruptedException. Otherwise, interrupt() merely sets the thread's interruption status. </li><li>Interruption is a cooperative mechanism. When one thread interrupts another, the interrupted thread does not necessarily stop what it is doing immediately. Instead, interruption is a way of politely asking another thread to stop what it is doing if it wants to, at its convenience. Some methods, like Thread.sleep(), take this request seriously, but methods are not required to pay attention to interruption. Methods that do not block but that still may take a long time to execute can respect requests for interruption by polling the interrupted status and return early if interrupted. You are free to ignore an interruption request, but doing so may compromise responsiveness. </li><li>One of the benefits of the cooperative nature of interruption is that it provides more flexibility for safely constructing cancelable activities. We rarely want an activity to stop immediately; program data structures could be left in an inconsistent state if the activity were canceled mid-update. Interruption allows a cancelable activity to clean up any work in progress, restore invariants, notify other activities of the cancellation, and then terminate. </li></ul></div><div class=\"section\"><h2>Don't swallow InterruptedException </h2><ul><li><a href=\"v\">Archive.org version</a> </li><li><a href=\"https://pskb-prod.herokuapp.com/java-and-j2ee/don-t-swallow-interruptedexception-call-thread-currentthread-interrupt-instead?status=in-review\">Don't swallow InterruptedException.</a> </li></ul></div>","metadata":{"title":"Cancelable Operation","slug":"cancelable-operation"}},"site":{"siteMetadata":{"title":"Milad Khajavi's Notes"}}},"pageContext":{"slug":"cancelable-operation","title":"Cancelable Operation"}},"staticQueryHashes":[]}